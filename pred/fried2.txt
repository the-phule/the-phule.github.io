From predator@cat.org.au Thu Apr  5 17:52:55 2001
Date: Wed, 17 Jan 2001 12:28:14 +1100 (EST)
From: predator@cat.org.au
Reply-To: catgeek@cat.org.au
To: catgeek@cat.org.au
Subject: [catgeek] deep fried silicon, BADMEM and everything

A few weeks back I mentioned I'd lost a modem to lightning. It happens
that I pulled my motherboard out early this morning to test an old DIMM,
and I looked at the serial port which the lightning killed.

Adjacent to it is a little SMD chip, with an identical copy adjacent to it
for the other serial port (which still works). 

In the dead serial port chip, there is a 2mm deep, conchoidal fracture
crater in the centre of the black plastic, and I can SEE THE WHOLE CHIP at
the bottom. Lightning SPALLED a chunk of black epoxy right out of the
unit, can ya believe it... and this was AFTER the juice went through and
cooked the modem. Amazing. I found the little chunk of it ratling around
in the case. I have a ISA card witha 16450 talking to the mouse now, and
that works

----Old cat toasted memory----

Back to the DIMM. It was a 32 meg one which was on a Cat motherboard which
was roasted about 18 months ago at EMU. The processor survived (is in the
hardware drawer) but the board was cooked. It looked like part of the ram
was cooked or corroded or something, one of the tracks had lifted off the
pad. 

I resoldered it down and finally shoved it in a slot on my (lightning
damaged serial port but otherwise perfectly functional) motherboard, and
booted up... there's bits of it dodgy but there were no memory utils
anywhere which I could use to map it. I can at least operate a shell and
have a filesystem (this was a redhat 6.2 rescue boot cd). I've downloaded
the tarball of memtest86 and will determine if we have most of it left.
Each chip is 2 megabytes, so we probably have about 28 or 30 megs still
addressable on it, and it's worth keeping if we can still use that memory.

Even if there's a 16-meg hole in the DIMM, we can use it if the kernel we
build for the machine with the toasted DIMM in it has broken-memory
support compiled into it, and lilo configured to invoke it. Badmem support
is probably a good idea in any case, since without it, if there are dodgy
bits in our ram and we dont know about them we won't know until we start
getting undesirable weirdness. Badmem uses the map of errors generated by
memtest86 and simply tells the kernel to not use them. No performance
penalty either, according to the benchmark testing.
 
So I'll play around with that a bit. We will, of course, be restricted to
using it in linux machines, since other OSs just can't deal with the dodgy
bits, but who wants to use a machine which has an error intolerant OS
anyway (snicker)?
 
<predator>



<<< the catgeek mailing archive - technical discussion at cat >>>
Archived at http://www.cat.org.au/lists/catgeek
Unsubscribe by sending empty message to getoff.catgeek@cat.org.au
